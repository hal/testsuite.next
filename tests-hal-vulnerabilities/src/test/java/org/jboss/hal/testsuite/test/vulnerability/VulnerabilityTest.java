/*
 * Copyright 2015-2016 Red Hat, Inc, and individual contributors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.jboss.hal.testsuite.test.vulnerability;

import java.util.ArrayList;
import java.util.List;

import org.jboss.arquillian.drone.api.annotation.Drone;
import org.jboss.arquillian.graphene.page.Page;
import org.jboss.arquillian.junit.Arquillian;
import org.jboss.hal.testsuite.Random;
import org.jboss.hal.testsuite.creaper.ManagementClientProvider;
import org.jboss.hal.testsuite.page.configuration.SystemPropertyPage;
import org.jboss.hal.testsuite.page.deployment.DeploymentContentPage;
import org.jboss.hal.testsuite.tooling.deployment.Deployment;
import org.jboss.hal.testsuite.tooling.deployment.DeploymentOperations;
import org.junit.AfterClass;
import org.junit.Assert;
import org.junit.BeforeClass;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.openqa.selenium.Alert;
import org.openqa.selenium.TimeoutException;
import org.openqa.selenium.UnhandledAlertException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.wildfly.extras.creaper.core.online.OnlineManagementClient;
import org.wildfly.extras.creaper.core.online.operations.Operations;
import org.wildfly.extras.creaper.core.online.operations.Values;

import static org.jboss.hal.dmr.ModelDescriptionConstants.DEPLOYMENT;
import static org.jboss.hal.dmr.ModelDescriptionConstants.VALUE;
import static org.jboss.hal.testsuite.fixtures.SystemPropertyFixtures.systemPropertyAddress;
import static org.jboss.hal.testsuite.test.vulnerability.VulnerabilityFixtures.INDEX_HTML;
import static org.jboss.hal.testsuite.test.vulnerability.VulnerabilityFixtures.XSS_JS;
import static org.jboss.hal.testsuite.test.vulnerability.VulnerabilityFixtures.XSS_JS_ENCODED;

@RunWith(Arquillian.class)
public class VulnerabilityTest {

    private static final OnlineManagementClient client = ManagementClientProvider.createOnlineManagementClient();
    private static final Operations operations = new Operations(client);
    protected static final DeploymentOperations deploymentOps = new DeploymentOperations(client);
    protected static final List<String> deploymentsToBeCleanedUp = new ArrayList<>();

    @Drone protected WebDriver browser;
    static Logger _log = LoggerFactory.getLogger("org.jboss");

    @BeforeClass
    public static void beforeClass() throws Exception {
        operations.add(systemPropertyAddress(XSS_JS), Values.empty().and(VALUE, Random.name()));

        Deployment deployment = createSimpleDeployment();
        client.apply(deployment.deployEnabledCommand());
    }

    @AfterClass
    public static void tearDown() throws Exception {
        operations.removeIfExists(systemPropertyAddress(XSS_JS));
        try {
            deploymentOps.removeDeploymentsIfExist(deploymentsToBeCleanedUp);
        } finally {
            client.close();
        }
    }

    @Page private SystemPropertyPage page;
    @Page private DeploymentContentPage deploymentContentPage;

    @Test
    public void resourceNameTable() {
        try {
            page.navigate();
            WebDriverWait wait = new WebDriverWait(browser, 2);
            wait.until(ExpectedConditions.alertIsPresent());
            Alert alert = browser.switchTo().alert();
            Assert.assertNull("There is a xss attack vulnerability on a table element.", alert);
        } catch (UnhandledAlertException e) {
            Assert.fail("There is a xss attack vulnerability on a table element.");
        } catch (TimeoutException ignore) {
            // safely ignore if there is no alert
        }
    }

    @Test
    public void deployment() {
        try {
            deploymentContentPage.navigate(DEPLOYMENT, XSS_JS_ENCODED);
            WebDriverWait wait = new WebDriverWait(browser, 2);
            wait.until(ExpectedConditions.alertIsPresent());
            Alert alert = browser.switchTo().alert();

            Assert.assertNull("There is a xss attack vulnerability on org.jboss.hal.testsuite.test.deployment content page.", alert);
        } catch (UnhandledAlertException e) {
            Assert.fail("There is a xss attack vulnerability on org.jboss.hal.testsuite.test.deployment content page.");
        } catch (TimeoutException ignore) {
            // safely ignore if there is no alert
        }
    }

    private static Deployment createSimpleDeployment() {
        deploymentsToBeCleanedUp.add(XSS_JS);
        return new Deployment.Builder(XSS_JS)
                .textFile(INDEX_HTML, "<h1>HAL to rule them all</h1>")
                .build();
    }


}
